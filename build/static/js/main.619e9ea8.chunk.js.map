{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","error","console","Feature","props","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","log","id","toLowerCase","length","map","peeps","key","name","image","baseimageurl","src","alt","Loading","Preview","searchResults","info","setFeaturedResult","fetchPage","pageUrl","results","disabled","prev","next","record","index","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","result","htmlFor","type","placeholder","onChange","target","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.619e9ea8.chunk.js","sourcesContent":["/**\r\n * This file features and exports all of your calls to the API\r\n * \r\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\r\n */\r\n export const BASE_URL = \"https://api.harvardartmuseums.org\";\r\n export const KEY = \"apikey=8b47dc60-0804-40e7-bf42-1c6a3dcd14ec\"; // USE YOUR KEY HERE/**\r\n \r\n//  * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\r\n\r\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\r\n  try {\r\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\r\n */\r\nexport async function fetchQueryResultsFromURL(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\r\n * \r\n * Then makes a call to the API, and returns the first page of results\r\n */\r\nexport async function fetchQueryResults({\r\n  century,\r\n  classification,\r\n  queryString,\r\n}) {\r\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \r\n    century }&keyword=${ queryString }`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n */\r\nexport async function fetchAllCenturies() {\r\n  if (localStorage.getItem('centuries')) {\r\n    return JSON.parse(localStorage.getItem('centuries'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('centuries', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \r\n */\r\nexport async function fetchAllClassifications() {\r\n  if (localStorage.getItem('classifications')) {\r\n    return JSON.parse(localStorage.getItem('classifications'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('classifications', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","import React, { Fragment } from \"react\";\r\n\r\n// Don't touch this import\r\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\r\n\r\n/**\r\n * We need a new component called Searchable which:\r\n *\r\n * Has a template like this:\r\n *\r\n * <span className=\"content\">\r\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\r\n * </span>\r\n *\r\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\r\n *\r\n * When someone clicks the anchor tag, you should:\r\n *\r\n * - preventDefault on the event\r\n * - call setIsLoading, set it to true\r\n *\r\n * Then start a try/catch/finally block:\r\n *\r\n * try:\r\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\r\n *  - send the result to setSearchResults (which will update the Preview component)\r\n * catch:\r\n *  - console.error the error\r\n * finally:\r\n *  - call setIsLoading, set it to false\r\n */\r\nconst Searchable = ({\r\n  searchTerm,\r\n  searchValue,\r\n  setIsLoading,\r\n  setSearchResults,\r\n}) => {\r\n  return (\r\n    <span className=\"content\">\r\n      <a\r\n        href=\"#\"\r\n        onClick={async (event) => {\r\n          event.preventDefault();\r\n          setIsLoading(true);\r\n\r\n          try {\r\n            const response = fetchQueryResultsFromTermAndValue(\r\n              searchTerm,\r\n              searchValue\r\n            );\r\n            setSearchResults(response);\r\n          } catch (error) {\r\n            console.error(error);\r\n          } finally {\r\n            setIsLoading(false);\r\n          }\r\n        }}\r\n      >\r\n        {searchTerm ? (\r\n          <>\r\n            <span className=\"content\">{searchValue}</span>{\" \"}\r\n          </>\r\n        ) : null}\r\n      </a>\r\n    </span>\r\n  );\r\n};\r\n\r\n/**\r\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\r\n *\r\n * <main id=\"feature\"></main>\r\n *\r\n * And like this when one is:\r\n *\r\n * <main id=\"feature\">\r\n *   <div className=\"object-feature\">\r\n *     <header>\r\n *       <h3>OBJECT TITLE</h3>\r\n *       <h4>WHEN IT IS DATED</h4>\r\n *     </header>\r\n *     <section className=\"facts\">\r\n *       <span className=\"title\">FACT NAME</span>\r\n *       <span className=\"content\">FACT VALUE</span>\r\n *       <span className=\"title\">NEXT FACT NAME</span>\r\n *       <span className=\"content\">NEXT FACT VALUE</span>\r\n *     </section>\r\n *     <section className=\"photos\">\r\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\r\n *     </section>\r\n *   </div>\r\n * </main>\r\n *\r\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\r\n * technique, medium, dimensions, people, department, division, contact, creditline\r\n *\r\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\r\n *\r\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\r\n *\r\n * This component should be exported as default.\r\n */\r\nconst Feature = (props) => {\r\n  if (props.featuredResult) {\r\n    const {\r\n      title,\r\n      dated,\r\n      images,\r\n      primaryimageurl,\r\n      description,\r\n      culture,\r\n      style,\r\n      technique,\r\n      medium,\r\n      dimensions,\r\n      people,\r\n      department,\r\n      division,\r\n      contact,\r\n      creditline,\r\n    } = props.featuredResult;\r\n    console.log(images, \"!!!\");\r\n    return (\r\n      <main id=\"feature\">\r\n        <div className=\"object-feature\">\r\n          <header>\r\n            <h3>{title}</h3>\r\n            <h4>{dated}</h4>\r\n          </header>\r\n          <section className=\"facts\">\r\n            {description ? (\r\n              <>\r\n                <span className=\"title\">{\"Description\"}</span>\r\n                <span className=\"content\">{description}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n\r\n            {culture ? (\r\n              <>\r\n                <span className=\"title\">{\"culture\"}</span>\r\n                <Searchable\r\n                  searchTerm=\"culture\"\r\n                  searchValue={culture}\r\n                  {...props}\r\n                />{\" \"}\r\n              </>\r\n            ) : null}\r\n            {technique ? (\r\n              <>\r\n                <span className=\"title\">{\"Technique\"}</span>\r\n                <Searchable\r\n                  searchTerm=\"technique\"\r\n                  searchValue={technique}\r\n                  {...props}\r\n                />{\" \"}\r\n              </>\r\n            ) : null}\r\n            {style ? (\r\n              <>\r\n                <span className=\"title\">{\"Style\"}</span>\r\n                <span className=\"content\">{style}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n            {medium ? (\r\n              <>\r\n                <span className=\"title\">{\"Medium\"}</span>\r\n                <Searchable\r\n                  searchTerm=\"medium\"\r\n                  searchValue={medium.toLowerCase}\r\n                  {...props}\r\n                />{\" \"}\r\n              </>\r\n            ) : null}\r\n            {dimensions ? (\r\n              <>\r\n                <span className=\"title\">{\"Dimensions\"}</span>\r\n                <span className=\"content\">{dimensions}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n            {people && people.length\r\n              ? people.map((peeps) => {\r\n                  return (\r\n                    <Fragment key={peeps.name}>\r\n                      <span className=\"title\">{\"People\"}</span>\r\n                      <Searchable\r\n                        searchTerm=\"medium\"\r\n                        searchValue={medium.toLowerCase}\r\n                        {...props}\r\n                      />{\" \"}\r\n                    </Fragment>\r\n                  );\r\n                })\r\n              : null}\r\n            {department ? (\r\n              <>\r\n                <span className=\"title\">{\"Department\"}</span>\r\n                <span className=\"content\">{department}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n            {division ? (\r\n              <>\r\n                <span className=\"title\">{\"Division\"}</span>\r\n                <span className=\"content\">{division}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n            {contact ? (\r\n              <>\r\n                <span className=\"title\">{\"Contact\"}</span>\r\n                <span className=\"content\">{contact}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n            {creditline ? (\r\n              <>\r\n                <span className=\"title\">{\"Creditline\"}</span>\r\n                <span className=\"content\">{creditline}</span>{\" \"}\r\n              </>\r\n            ) : null}\r\n          </section>\r\n          <section className=\"photos\">\r\n            {images.length ? (\r\n              images.map((image) => {\r\n                return (\r\n                  <img\r\n                    key={image.baseimageurl}\r\n                    src={image.baseimageurl}\r\n                    alt={\"IMG_N/A\"}\r\n                  />\r\n                );\r\n              })\r\n            ) : primaryimageurl ? (\r\n              <img src={primaryimageurl} alt={\"IMG_N/A\"} />\r\n            ) : null}\r\n          </section>\r\n        </div>\r\n      </main>\r\n    );\r\n  } else {\r\n    return <main id=\"feature\"></main>;\r\n  }\r\n};\r\n\r\nexport default Feature;\r\n","import React from \"react\";\r\n\r\n/**\r\n * Create and export a component called Loading which uses this static HTML template:\r\n *\r\n * <div id=\"loading\">\r\n *   <h2 className=\"message\">Searching...</h2>\r\n * </div>\r\n */\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div id=\"loading\">\r\n      <h2 className=\"message\">Searching...</h2>\r\n    </div>\r\n  );\r\n};\r\nexport default Loading;\r\n","import React from 'react';\r\n\r\n/**\r\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\r\n * which are query urls.\r\n */\r\nimport { fetchQueryResultsFromURL } from '../api';\r\n\r\nconst Preview = ({searchResults:{info, records}, setSearchResults, setFeaturedResult, setIsLoading}) => {\r\n  /**\r\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\r\n   * and also destructure info and records from props.searchResults\r\n   * \r\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\r\n   */\r\n// const {info, records} = searchResults\r\n\r\n  /**\r\n   * Don't touch this function, it's good to go.\r\n   * \r\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\r\n   */\r\n  async function fetchPage(pageUrl) {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const results = await fetchQueryResultsFromURL(pageUrl);\r\n      setSearchResults(results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <aside id=\"preview\">\r\n      <header className=\"pagination\">\r\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\r\n        <button disabled={!info.prev} className=\"previous\" onClick={()=>fetchPage(info.prev)}>\r\n          Previous\r\n        </button>\r\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\r\n        <button disabled={!info.next} className=\"next\" onClick={()=>fetchPage(info.next)}>\r\n          Next\r\n        </button>\r\n      </header>\r\n      <section className=\"results\">\r\n        {\r\n          //Here we should map over the records, and render something like this for each one:\r\n          records.map((record, index)=>{\r\n          return <div\r\n            key={index}\r\n            className=\"object-preview\"\r\n            onClick={(event) => {\r\n              event.preventDefault();\r\n              // prevent the default\r\n              setFeaturedResult(record);\r\n              // set the featured result to be this record, using setFeaturedResult\r\n            }}\r\n          >\r\n            {/* if the record.primaryimageurl exists, show this:{\" \"},otherwise show nothing*/}\r\n            {record.primaryimageurl ?\r\n            <img src={record.primaryimageurl} alt={record.description} />\r\n           :\r\n            null}\r\n            {\r\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\r\n              record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\r\n            }\r\n          </div>\r\n          })\r\n        }\r\n      </section>\r\n    </aside>\r\n  );\r\n};\r\nexport default Preview;","import React, { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * Don't touch these imports!\r\n */\r\nimport {\r\n  fetchAllCenturies,\r\n  fetchAllClassifications,\r\n  fetchQueryResults,\r\n} from \"../api\";\r\n\r\nconst Search = ({ setIsLoading, setSearchResults }) => {\r\n  // Make sure to destructure setIsLoading and setSearchResults from the props\r\n\r\n  /**\r\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\r\n   * our controlled inputs:\r\n   *\r\n   * centuryList, setCenturyList (default should be an empty array, [])\r\n   * classificationList, setClassificationList (default should be an empty array, [])\r\n   * queryString, setQueryString (default should be an empty string, '')\r\n   * century, setCentury (default should be the string 'any')\r\n   * classification, setClassification (default should be the string 'any')\r\n   */\r\n  const [centuryList, setCenturyList] = useState([]);\r\n  const [classificationList, setClassificationList] = useState([]);\r\n  const [queryString, setQueryString] = useState(\"\");\r\n  const [century, setCentury] = useState(\"any\");\r\n  const [classification, setClassification] = useState(\"any\");\r\n\r\n  /**\r\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\r\n   *\r\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\r\n   *\r\n   * Make sure to console.error on caught errors from the API methods.\r\n   */\r\n  useEffect(() => {\r\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\r\n\r\n      .then(([centuries, classifications]) => {\r\n        setCenturyList(centuries);\r\n        setClassificationList(classifications);\r\n      })\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  /**\r\n   * This is a form element, so we need to bind an onSubmit handler to it which:\r\n   *\r\n   * calls event.preventDefault()\r\n   * calls setIsLoading, set it to true\r\n   *\r\n   * then, in a try/catch/finally block:\r\n   *\r\n   * try to:\r\n   * - get the results from fetchQueryResults({ century, classification, queryString })\r\n   * - pass them to setSearchResults\r\n   *\r\n   * catch: error to console.error\r\n   *\r\n   * finally: call setIsLoading, set it to false\r\n   */\r\n  return (\r\n    <form\r\n      id=\"search\"\r\n      onSubmit={async (event) => {\r\n        // write code here\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n\r\n        try {\r\n          const result = await fetchQueryResults({\r\n            century,\r\n            classification,\r\n            queryString,\r\n          });\r\n          setSearchResults(result);\r\n        } catch (error) {\r\n          console.error(error);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      }}\r\n    >\r\n      <fieldset>\r\n        <label htmlFor=\"keywords\">Query</label>\r\n        <input\r\n          id=\"keywords\"\r\n          type=\"text\"\r\n          placeholder=\"enter keywords...\"\r\n          value={queryString}\r\n          onChange={(event) => setQueryString(event.target.value)}\r\n        />\r\n      </fieldset>\r\n      <fieldset>\r\n        <label htmlFor=\"select-classification\">\r\n          Classification{\" \"}\r\n          <span className=\"classification-count\">\r\n            ({classificationList.length})\r\n          </span>\r\n        </label>\r\n        <select\r\n          name=\"classification\"\r\n          id=\"select-classification\"\r\n          value={classification}\r\n          onChange={(event) => setClassification(event.target.value)}\r\n        >\r\n          <option value=\"any\">Any</option>\r\n\r\n          {\r\n            /* map over the classificationList, return an <option /> */\r\n            \r\n            classificationList.map((classification, index) => {\r\n              console.log(classificationList, \"!!!!!!!!!!\")\r\n              return (\r\n                <option\r\n                  key={index + \"classification\"}\r\n                  value={classification.name}\r\n                >\r\n                  {classification.name}\r\n                </option>\r\n              );\r\n            })\r\n          }\r\n        </select>\r\n      </fieldset>\r\n      <fieldset>\r\n        <label htmlFor=\"select-century\">\r\n          Century <span className=\"century-count\">({centuryList.length})</span>\r\n        </label>\r\n        <select\r\n          name=\"century\"\r\n          id=\"select-century\"\r\n          value={century}\r\n          onChange={(event) => setCentury(event.target.value)}\r\n        >\r\n          <option value=\"any\">Any</option>\r\n          {\r\n            /* map over the centuryList, return an <option /> */\r\n            centuryList.map((century, index) => {\r\n              return (\r\n                <option key={index + \"century\"} value={century.name}>\r\n                  {century.name}\r\n                </option>\r\n              );\r\n            })\r\n          }\r\n        </select>\r\n      </fieldset>\r\n      <button>SEARCH</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\n/**\r\n * Create/export a component called Title which uses this static HTML as the template:\r\n *\r\n * <div id=\"title\">\r\n *   <h1>\r\n *     The Art Collector\r\n *   </h1>\r\n *   <h5>\r\n *     Search the Harvard Art Museums' Private Collections\r\n *   </h5>\r\n * </div>\r\n */\r\nconst Title = () => {\r\n  return (\r\n    <div id=\"title\">\r\n      <h1>The Art Collector</h1>\r\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// These imports won't work until you fix ./components/index.js\r\nimport {\r\n  Feature,\r\n  Loading,\r\n  Preview,\r\n  Search,\r\n  Title,\r\n} from \"./components\";\r\n\r\nconst App = () => {\r\n  /**\r\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\r\n   * be made here, so create state pairs using useState() for:\r\n   *\r\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\r\n   * featuredResult, setFeaturedResult (default should be null)\r\n   * isLoading, setIsLoading (default should be false)\r\n   */\r\n\r\nconst [searchResults, setSearchResults]=useState({info: {}, records: []})\r\nconst [featuredResult, setFeaturedResult]=useState(null)\r\nconst [isLoading, setIsLoading]=useState(false)\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* <Title /> is static, doesn't need any props */}\r\n      <Title />\r\n      {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\r\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\r\n      {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\r\n      <Preview\r\n        searchResults={searchResults}\r\n        setIsLoading={setIsLoading}\r\n        setSearchResults={setSearchResults}\r\n        setFeaturedResult={setFeaturedResult}\r\n      />\r\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\r\n      <Feature \r\n    featuredResult={featuredResult}\r\n    setIsLoading={setIsLoading}\r\n    setSearchResults={setSearchResults}\r\n    />\r\n      {/* <Loading /> is static, but should only render when isLoading is true */}\r\n      {isLoading ? <Loading  />: null} \r\n      {/*use a ternary and render null if isLoading is false*/}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Bootstrap the <App /> component into the '#app' element in the DOM,\r\n * using ReactDOM.render();\r\n */\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}